package org.dejava.component.util.test.runner.statement.dataprovider;

import java.io.InputStream;

import junit.framework.TestCase;

import org.dejava.component.util.exception.localized.EmptyParameterException;
import org.dejava.component.util.reflection.handler.PackageHandler;
import org.dejava.component.util.test.annotation.MultiDataTest;
import org.dejava.component.util.test.runner.MultiDataJUnitRunner;
import org.dejava.component.util.xml.XMLCreator;
import org.dejava.component.util.xml.XMLDecoder;
import org.junit.runners.model.FrameworkMethod;
import org.w3c.dom.Document;

/**
 * Provides access to XML test data.
 */
public class XMLTestDataProvider implements TestDataProvider {
	
	/**
	 * Default path for the XML.
	 */
	public static final String DEFAULT_XML_PATH = "xml/" + MultiDataJUnitRunner.METHOD_NAME_EXPRESSION
			+ ".xml";
	
	/**
	 * The XML file path (relative to the test class).
	 */
	private String filePath;
	
	/**
	 * Gets the XML file path (relative to the test class).
	 * 
	 * @return The XML file path (relative to the test class).
	 */
	public String getFilePath() {
		return filePath;
	}
	
	/**
	 * Sets the XML file path (relative to the test class).
	 * 
	 * @param filePath
	 *            New XML file path (relative to the test class).
	 */
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	
	/**
	 * Gets the XML stream for the test data objects.
	 * 
	 * @param multiDataTest
	 *            Test case configuration annotation.
	 * @return The XML stream for the test data objects.
	 * @throws EmptyParameterException
	 *             If the test class cannot be accessed.
	 */
	private InputStream getXMLStream(final MultiDataTest multiDataTest) throws EmptyParameterException {
		// XML relative path.
		String xmlRelativePath;
		// If the test case configuration does not provide a configuration file
		// path.
		if (getFP.isEmpty()) {
			// The relative path is the default one.
			xmlRelativePath = DEFAULT_XML_PATH;
			// Replaces the method name in the default relative path.
			xmlRelativePath = xmlRelativePath.replace(MultiDataTest.METHOD_NAME_EXPRESSION, getTestMethod()
					.getName());
		}
		// If the test case configuration does provide a configuration file
		// path.
		else {
			// Gets the given path.
			xmlRelativePath = multiDataTest.xmlPath();
		}
		// Gets the path for the XML.
		final String xmlPath = PackageHandler.getPackageAsDirPath(getTargetTest().getClass()) + '/'
				+ xmlRelativePath;
		// Returns the XML stream.
		return Thread.currentThread().getContextClassLoader().getResourceAsStream(xmlPath);
	}
	
	/**
	 * @see org.dejava.component.util.test.runner.statement.dataprovider.TestDataProvider#getTestData(org.junit.runners.model.FrameworkMethod,
	 *      java.lang.Object, org.dejava.component.util.test.annotation.MultiDataTest)
	 */
	@Override
	public Iterable<?> getTestData(final FrameworkMethod testMethod, final Object targetTest,
			final MultiDataTest multiDataTest) {
		// Gets the XML input stream.
		final InputStream xmlInputStream = getXMLStream(multiDataTest);
		// Creates the XML document for the stream.
		final Document xmlDocument = XMLCreator.createXMLDocument(xmlInputStream);
		// Gets the test data object from the XML document.
		return (Iterable<?>) XMLDecoder.fromXML(xmlDocument, null, TestCase.class, null);
	}
}
