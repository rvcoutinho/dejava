Found a 8 line (46 tokens) duplication in the following files: 
Starting at line 66 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\test\ParametricJUnitRunnerTest.java
Starting at line 90 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\test\ParametricJUnitRunnerTest.java

		final RunListenerLog runListener = new RunListenerLog("testNormalFailure");
		// Adds the listener to the notifier.
		runNotifier.addListener(runListener);
		// Tries to run the tests.
		getFakeTestRunner().run(runNotifier);
		// If the test is not finished with expected failures.
		if ((!runListener.getStarted()) || (!runListener.getFinished()) || (runListener.getFailure() == null)
				|| ((runListener.getFailure().getException() instanceof AssertionFailedError))) {
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\test\ParametricJUnitRunnerTest.java
Starting at line 66 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\test\ParametricJUnitRunnerTest.java

		final RunListenerLog runListener = new RunListenerLog("testNormalAssumptionFailure");
		// Adds the listener to the notifier.
		runNotifier.addListener(runListener);
		// Tries to run the tests.
		getFakeTestRunner().run(runNotifier);
		// If the test is not finished with expected failures.
		if ((!runListener.getStarted()) || (!runListener.getFinished()) || (runListener.getFailure() == null)
=====================================================================
Found a 14 line (39 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\runner\statement\provider\impl\MethodTestDataProvider.java
Starting at line 74 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\runner\statement\provider\impl\JNDITestDataProvider.java

		this.methodName = methodName;
	}
	
	/**
	 * @see org.dejava.component.util.test.runner.provider.TestDataProvider#getTestData(java.lang.Object,
	 *      org.junit.runners.model.FrameworkMethod)
	 */
	@Override
	public Collection<?> getTestData(final Object targetTest, final FrameworkMethod testMethod)
			throws UnavailableTestDataException {
		// Tries to get the data.
		try {
			// The test data is the return of the method invocation.
			return (Collection<?>) MethodHandler.invokeMethod(getObjectPath(), getMethodName(), null);
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\runner\ParametricJUnitRunner.java
Starting at line 155 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\runner\ParametricJUnitRunner.java

	protected void validatePublicVoidOneTestCaseArg(final List<FrameworkMethod> methods,
			final boolean isStatic, final List<Throwable> errors) {
		// For each method.
		for (final FrameworkMethod currentTestMethod : methods) {
			// Performs "public void" validation.
			currentTestMethod.validatePublicVoid(isStatic, errors);
=====================================================================
Found a 13 line (31 tokens) duplication in the following files: 
Starting at line 136 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\test\auxiliary\RunListenerLog.java
Starting at line 148 of C:\Users\Romulo Coutinho\Desktop\dejava\components\Test\src\org\dejava\component\util\test\test\auxiliary\RunListenerLog.java

	public void testAssumptionFailure(final Failure failure) {
		// If the failed test has the same given test description.
		if (failure.getDescription().getMethodName().equals(getTestMethodName())) {
			// Logs the failure for the test.
			setFailure(failure);
		}
	}
	
	/**
	 * @see org.junit.runner.notification.RunListener#testFinished(org.junit.runner.Description)
	 */
	@Override
	public void testFinished(final Description description) throws Exception {
