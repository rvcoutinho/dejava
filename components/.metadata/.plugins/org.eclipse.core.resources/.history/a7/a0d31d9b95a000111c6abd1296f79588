package org.dejava.component.util.test.runner.statement.dataprovider;

import org.dejava.component.util.reflection.handler.MethodHandler;
import org.dejava.component.util.test.annotation.MultiDataTest;
import org.junit.runners.model.FrameworkMethod;

/**
 * Provides access to XML test data.
 */
public class JNDITestDataProvider implements TestDataProvider {
	
	/**
	 * The JNDI path for the object from which the test data provider method will be invoked.
	 */
	private String objectPath;
	
	/**
	 * The method name for the test data provider.
	 */
	private String methodName;
	
	/**
	 * Gets the method name for the test data provider.
	 * 
	 * @return The method name for the test data provider.
	 */
	public String getMethodName() {
		// If the method name is not given.
		if (methodName == null) {
			// The default method name is used.
			methodName = DEFAULT_METHOD_NAME;
		}
		// Returns the method name.
		return methodName;
	}
	
	/**
	 * Sets the method name for the test data provider.
	 * 
	 * @param methodName
	 *            New method name for the test data provider.
	 */
	public void setMethodName(final String methodName) {
		this.methodName = methodName;
	}
	
	/**
	 * @see org.dejava.component.util.test.runner.statement.dataprovider.TestDataProvider#getTestData(org.junit.runners.model.FrameworkMethod,
	 *      java.lang.Object, org.dejava.component.util.test.annotation.MultiDataTest)
	 */
	@Override
	public Iterable<?> getTestData(final FrameworkMethod testMethod, final Object targetTest,
			final MultiDataTest multiDataTest) {
		// The test data is the return of the method invocation.
		return (Iterable<?>) MethodHandler.invokeMethod(multiDataTest.jndiObjectPath(),
				multiDataTest.methodName(), null);
	}
}
