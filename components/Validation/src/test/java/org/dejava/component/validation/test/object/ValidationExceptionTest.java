package org.dejava.component.validation.test.object;

import java.util.Arrays;

import org.dejava.component.validation.object.ThrowerValidator;
import org.dejava.component.validation.object.ValidationException;
import org.dejava.component.validation.test.object.util.FakeApplicationMessageHandler;
import org.dejava.component.validation.test.object.util.FakeEntity;
import org.junit.Assert;
import org.junit.Test;

/**
 * Tests for the validation exception class.
 */
public class ValidationExceptionTest {

	/**
	 * Some invalid entity parameters.
	 */
	private static final Object[][] INVALID_ENTITY_PARAMS = {
			{ null, 120, new String[] { "Numero grande 120" } },
			{ "cdvxc", null, new String[] { "Email errado" } },
			{ "khdskjhccdslx", -9, new String[] { "Email errado", "Numero pequeno 0" } } };

	/**
	 * Tests the messages generated by the validation exception class.
	 */
	@Test
	public void testViolationMessages() {
		// For each invalid parameters.
		for (final Object[] currentParams : INVALID_ENTITY_PARAMS) {
			// Creates a new entity to be validated.
			final FakeEntity fakeEntity = new FakeEntity((String) currentParams[0],
					(Integer) currentParams[1]);
			// Tries to validate the entity.
			try {
				ThrowerValidator.getDefaultThrowerValidator().validate(fakeEntity);
				// If no exception is raised, fails the test.
				Assert.fail();
			}
			// If a validation exception is raised.
			catch (final ValidationException exception) {
				// Creates a new fake application message handler.
				final FakeApplicationMessageHandler messageHandler = new FakeApplicationMessageHandler();
				// Adds the violation messages to the fake application message handler.
				exception.addLocalizedMessages(messageHandler);
				// Asserts that the expected messages are there.
				messageHandler.getFakeAppMessageContext().containsAll(
						Arrays.asList((String[]) currentParams[2]));
			}
		}
	}
}
